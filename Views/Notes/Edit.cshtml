@model NoteEditViewModel

@{
    ViewData["Title"] = "Edit";
}
<style>
    .control-label {
        font-size: xx-large;
    }

    #codeEditor {
        height: 500px;
        width: 100%;
    }
</style>
<h4>Note - Edit</h4>
<hr />
<div>
    <a class="btn btn-primary" asp-action="Index">Back to List</a>
    <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#deleteModal">
        Delete
    </button>
    <div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Are you sure you want to delete this note ?</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-dismiss="modal">No</button>
                    <form asp-action="Delete" method="post" asp-route-id="@Model.Note.Id">
                        <button class="btn btn-danger" type="submit" value="Submit">Yes</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
<hr />
<div class="row">
    <div class="col-md-12">
        <form>
            <input type="hidden" asp-for="@Model.Note.Id" />
            <div class="form-group">
                @if (string.IsNullOrWhiteSpace(@Model.Note.Content))
                {
                    <a id="ViewNote" class="btn btn-primary">Add Note Snip</a>
                }


            </div>
            <div class="form-group">
                <label asp-for="@Model.Note.Name" class="control-label"></label>
                <input asp-for="@Model.Note.Name" class="form-control" />
            </div>
            <div class="form-group" id="note-content">
                <label asp-for="@Model.Note.Content" class="control-label"></label>
                <input asp-for="@Model.Note.Content" class="form-control" hidden />
                <div id="editorContent" style="height: 300px;">
                    @Html.Raw(@Model.Note.Content)
                </div>
            </div>
           
        </form>
    </div>
</div>



@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.7/ace.js"
            integrity="sha256-C7DTYRJLG+B/VEzHGeoPMw699nsTQYPAXHKXZb+q04E="
            crossorigin="anonymous"></script>
    <script>
      
        window.addEventListener('load', (event) => {
            
            var curNoteId = $("#Note_Id").val();
            var noteContent = $("#note-content")

            @if (string.IsNullOrWhiteSpace(@Model.Note.Content)) {
                @Html.Raw("noteContent.hide();")
            }

          
           

            $("#ViewNote").click(function () {
                noteContent.show();
                $("#ViewNote").hide();
            });

            var curTimeOutNoteName = null;
            $("#Note_Name").keyup(function () {
                if (curTimeOutNoteName !== null) {
                    clearTimeout(curTimeOutNoteName);
                }
                curTimeOutNoteName = setTimeout(function () {
                    $.ajax({
                        url: "/api/Notes/NoteName/" + curNoteId,
                        dataType: 'text',
                        type: 'post',
                        contentType: 'application/json',
                        data: JSON.stringify({ "noteName": $("#Note_Name").val() }),
                        success: function (data, textStatus, jQxhr) {
                        },
                        error: function (jqXhr, textStatus, errorThrown) {
                            alertify.message("Could not save change", 1000);
                        }
                    });
                }, 500);
            })


            var toolbarOptions = [
                ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
                ['blockquote', 'code-block'],
                [{ 'header': 1 }, { 'header': 2 }],               // custom button values
                [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                [{ 'script': 'sub' }, { 'script': 'super' }],      // superscript/subscript
                [{ 'indent': '-1' }, { 'indent': '+1' }],          // outdent/indent
                [{ 'direction': 'rtl' }],                         // text direction
                [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown
                [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
                [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme
                [{ 'font': [] }],
                [{ 'align': [] }],
                ['clean']                                         // remove formatting button
            ];

            var quillDocs = new Quill('#editorContent', {
                theme: 'snow',
                modules: {
                    toolbar: toolbarOptions
                },
            });

            var curTimeOutNoteContent = null;
            quillDocs.on('text-change', function (delta) {
                $("#Note_Content").val(quillDocs.root.innerHTML);
                if (curTimeOutNoteContent !== null) {
                    clearTimeout(curTimeOutNoteContent);
                }
                curTimeOutNoteContent = setTimeout(function () {
                    $.ajax({
                        url: "/api/Notes/NoteContent/" + curNoteId,
                        dataType: 'text',
                        type: 'post',
                        contentType: 'application/json',
                        data: JSON.stringify({ "noteContent": $("#Note_Content").val() }),
                        success: function (data, textStatus, jQxhr) {
                        },
                        error: function (jqXhr, textStatus, errorThrown) {
                            alertify.message("Could not save change", 1000);
                        }
                    });
                }, 500);
            });

        });
    </script>
}
